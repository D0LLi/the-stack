const {
  FlexibleXYPlot,
  XAxis,
  YAxis,
  ChartLabel,
  HorizontalGridLines,
  VerticalGridLines,
  LineSeries,
  LineSeriesCanvas,
  Crosshair,
  LabelSeries
} = reactVis;

const { useState } = React;

const {
  Dropdown,
  DropdownButton,
  MenuItem,
  Image,
  FormControl
} = ReactBootstrap;

/* Size of graph on screen */
const screenScale = 0.8;
const graphSize =
  screenScale * screen.width > 1000 ? 1000 : screenScale * screen.width;

/* max classes that can be shown on the graph and the colors of those classes' lines */
const max_classes = 3;
const colors = ["#2e59a8", "#73a2c6", "#8abccf", "#ffffe0"];

/* % of how full a class is for every hour */
const DATA = [
  [
    { x: 0, y: 0 },
    { x: 1, y: 15 },
    { x: 2, y: 33 },
    { x: 3, y: 70 },
    { x: 4, y: 100 },
    { x: 5, y: 100 },
    { x: 6, y: 100 }
  ],
  [
    { x: 0, y: 5 },
    { x: 1, y: 10 },
    { x: 2, y: 20 },
    { x: 3, y: 65 },
    { x: 4, y: 80 },
    { x: 5, y: 100 },
    { x: 6, y: 100 }
  ],
  [
    { x: 0, y: 3 },
    { x: 1, y: 20 },
    { x: 2, y: 30 },
    { x: 3, y: 40 },
    { x: 4, y: 60 },
    { x: 5, y: 80 },
    { x: 6, y: 100 }
  ],
  [
    { x: 0, y: 10 },
    { x: 1, y: 11 },
    { x: 2, y: 15 },
    { x: 3, y: 25 },
    { x: 4, y: 35 },
    { x: 5, y: 45 },
    { x: 6, y: 75 }
  ],
  [
    { x: 0, y: 0 },
    { x: 1, y: 8 },
    { x: 2, y: 12 },
    { x: 3, y: 16 },
    { x: 4, y: 24 },
    { x: 5, y: 36 },
    { x: 6, y: 30 }
  ]
];

const SEATS_LEFT = [
  [
    { x: 0, y: 16 },
    { x: 1, y: 16 },
    { x: 2, y: 15 },
    { x: 3, y: 14 },
    { x: 4, y: 13 },
    { x: 5, y: 12 },
    { x: 6, y: 11 }
  ],
  [
    { x: 0, y: 26 },
    { x: 1, y: 26 },
    { x: 2, y: 25 },
    { x: 3, y: 24 },
    { x: 4, y: 23 },
    { x: 5, y: 22 },
    { x: 6, y: 21 }
  ],
  [
    { x: 0, y: 36 },
    { x: 1, y: 36 },
    { x: 2, y: 35 },
    { x: 3, y: 34 },
    { x: 4, y: 33 },
    { x: 5, y: 32 },
    { x: 6, y: 31 }
  ],
  [
    { x: 0, y: 46 },
    { x: 1, y: 46 },
    { x: 2, y: 45 },
    { x: 3, y: 44 },
    { x: 4, y: 43 },
    { x: 5, y: 42 },
    { x: 6, y: 41 }
  ],
  [
    { x: 0, y: 56 },
    { x: 1, y: 56 },
    { x: 2, y: 55 },
    { x: 3, y: 54 },
    { x: 4, y: 53 },
    { x: 5, y: 52 },
    { x: 6, y: 51 }
  ]
];

/* hours scraped */
const DATES = [
  "11/7-9:00",
  "11/7-10:00",
  "11/7-11:00",
  "11/7-12:00",
  "11/7-13:00",
  "11/7-14:00",
  "11/7-15:00",
  "11/7-16:00",
  "11/7-17:00",
  "11/7-18:00",
  "11/7-19:00",
  "11/7-20:00",
  "11/7-21:00",
  "11/7-22:00",
  "11/7-23:00",
  "11/8-0:00",
  "11/8-1:00",
  "11/8-2:00",
  "11/8-3:00",
  "11/8-4:00",
  "11/8-5:00",
  "11/8-6:00",
  "11/8-7:00",
  "11/8-8:00",
  "11/8-9:00",
  "11/8-10:00",
  "11/8-11:00",
  "11/8-12:00",
  "11/8-13:00",
  "11/8-14:00",
  "11/8-15:00",
  "11/8-16:00",
  "11/8-17:00",
  "11/8-18:00",
  "11/8-19:00",
  "11/8-20:00",
  "11/8-21:00",
  "11/8-22:00",
  "11/8-23:00",
  "11/9-0:00",
  "11/9-1:00",
  "11/9-2:00",
  "11/9-3:00",
  "11/9-4:00",
  "11/9-5:00",
  "11/9-6:00",
  "11/9-7:00",
  "11/9-8:00",
  "11/9-9:00",
  "11/9-10:00",
  "11/9-11:00",
  "11/9-12:00",
  "11/9-13:00",
  "11/9-14:00",
  "11/9-15:00",
  "11/9-16:00",
  "11/9-17:00",
  "11/9-18:00",
  "11/9-19:00",
  "11/9-20:00",
  "11/9-21:00",
  "11/9-22:00",
  "11/9-23:00",
  "11/10-0:00",
  "11/10-1:00",
  "11/10-2:00",
  "11/10-3:00",
  "11/10-4:00",
  "11/10-5:00",
  "11/10-6:00",
  "11/10-7:00",
  "11/10-8:00",
  "11/10-9:00",
  "11/10-10:00",
  "11/10-11:00",
  "11/10-12:00",
  "11/10-13:00",
  "11/10-14:00",
  "11/10-15:00",
  "11/10-16:00",
  "11/10-17:00",
  "11/10-18:00",
  "11/10-19:00",
  "11/10-20:00",
  "11/10-21:00",
  "11/10-22:00",
  "11/10-23:00",
  "11/11-0:00",
  "11/11-1:00",
  "11/11-2:00",
  "11/11-3:00",
  "11/11-4:00",
  "11/11-5:00",
  "11/11-6:00",
  "11/11-7:00",
  "11/11-8:00",
  "11/11-9:00",
  "11/11-10:00",
  "11/11-11:00",
  "11/11-12:00",
  "11/11-13:00",
  "11/11-14:00",
  "11/11-15:00",
  "11/11-16:00",
  "11/11-17:00",
  "11/11-18:00",
  "11/11-19:00",
  "11/11-20:00",
  "11/11-21:00",
  "11/11-22:00",
  "11/11-23:00",
  "11/12-0:00",
  "11/12-1:00",
  "11/12-2:00",
  "11/12-3:00",
  "11/12-4:00",
  "11/12-5:00",
  "11/12-6:00",
  "11/12-7:00",
  "11/12-8:00",
  "11/12-9:00",
  "11/12-10:00",
  "11/12-11:00",
  "11/12-12:00",
  "11/12-13:00",
  "11/12-14:00",
  "11/12-15:00",
  "11/12-16:00",
  "11/12-17:00",
  "11/12-18:00",
  "11/12-19:00",
  "11/12-20:00",
  "11/12-21:00",
  "11/12-22:00",
  "11/12-23:00",
  "11/13-0:00",
  "11/13-1:00",
  "11/13-2:00",
  "11/13-3:00",
  "11/13-4:00",
  "11/13-5:00",
  "11/13-6:00",
  "11/13-7:00",
  "11/13-8:00",
  "11/13-9:00",
  "11/13-10:00",
  "11/13-11:00",
  "11/13-12:00",
  "11/13-13:00",
  "11/13-14:00",
  "11/13-15:00",
  "11/13-16:00",
  "11/13-17:00",
  "11/13-18:00",
  "11/13-19:00",
  "11/13-20:00",
  "11/13-21:00",
  "11/13-22:00",
  "11/13-23:00",
  "11/14-0:00",
  "11/14-1:00",
  "11/14-2:00",
  "11/14-3:00",
  "11/14-4:00",
  "11/14-5:00",
  "11/14-6:00",
  "11/14-7:00",
  "11/14-8:00",
  "11/14-9:00",
  "11/14-10:00",
  "11/14-11:00",
  "11/14-12:00",
  "11/14-13:00",
  "11/14-14:00",
  "11/14-15:00",
  "11/14-16:00",
  "11/14-17:00",
  "11/14-18:00",
  "11/14-19:00",
  "11/14-20:00",
  "11/14-21:00",
  "11/14-22:00",
  "11/14-23:00",
  "11/15-0:00",
  "11/15-1:00",
  "11/15-2:00",
  "11/15-3:00",
  "11/15-4:00",
  "11/15-5:00",
  "11/15-6:00",
  "11/15-7:00",
  "11/15-8:00",
  "11/15-9:00",
  "11/15-10:00",
  "11/15-11:00",
  "11/15-12:00",
  "11/15-13:00",
  "11/15-14:00",
  "11/15-15:00",
  "11/15-16:00",
  "11/15-17:00",
  "11/15-18:00",
  "11/15-19:00",
  "11/15-20:00",
  "11/15-21:00",
  "11/15-22:00",
  "11/15-23:00",
  "11/16-0:00",
  "11/16-1:00",
  "11/16-2:00",
  "11/16-3:00",
  "11/16-4:00",
  "11/16-5:00",
  "11/16-6:00",
  "11/16-7:00",
  "11/16-8:00",
  "11/16-9:00",
  "11/16-10:00",
  "11/16-11:00",
  "11/16-12:00",
  "11/16-13:00",
  "11/16-14:00",
  "11/16-15:00",
  "11/16-16:00",
  "11/16-17:00",
  "11/16-18:00",
  "11/16-19:00",
  "11/16-20:00",
  "11/16-21:00",
  "11/16-22:00",
  "11/16-23:00",
  "11/17-0:00",
  "11/17-1:00",
  "11/17-2:00",
  "11/17-3:00",
  "11/17-4:00",
  "11/17-5:00",
  "11/17-6:00",
  "11/17-7:00",
  "11/17-8:00",
  "11/17-9:00",
  "11/17-10:00",
  "11/17-11:00",
  "11/17-12:00",
  "11/17-13:00",
  "11/17-14:00",
  "11/17-15:00",
  "11/17-16:00",
  "11/17-17:00",
  "11/17-18:00",
  "11/17-19:00",
  "11/17-20:00",
  "11/17-21:00",
  "11/17-22:00",
  "11/17-23:00",
  "11/18-0:00",
  "11/18-1:00",
  "11/18-2:00",
  "11/18-3:00",
  "11/18-4:00",
  "11/18-5:00",
  "11/18-6:00",
  "11/18-7:00",
  "11/18-8:00",
  "11/18-9:00",
  "11/18-10:00",
  "11/18-11:00",
  "11/18-12:00",
  "11/18-13:00",
  "11/18-14:00",
  "11/18-15:00",
  "11/18-16:00",
  "11/18-17:00",
  "11/18-18:00",
  "11/18-19:00",
  "11/18-20:00",
  "11/18-21:00",
  "11/18-22:00",
  "11/18-23:00",
  "11/19-0:00",
  "11/19-1:00",
  "11/19-2:00",
  "11/19-3:00",
  "11/19-4:00",
  "11/19-5:00",
  "11/19-6:00",
  "11/19-7:00",
  "11/19-8:00",
  "11/19-9:00",
  "11/19-10:00",
  "11/19-11:00",
  "11/19-12:00",
  "11/19-13:00",
  "11/19-14:00",
  "11/19-15:00",
  "11/19-16:00",
  "11/19-17:00",
  "11/19-18:00",
  "11/19-19:00"
];

const CLASSES = [
  "A&O SCI 1",
  "A&O SCI 104",
  "A&O SCI 145",
  "A&O SCI 188",
  "A&O SCI 1L",
  "A&O SCI 2",
  "A&O SCI 3",
  "A&O SCI 3L",
  "A&O SCI 90",
  "A&O SCI C110",
  "A&O SCI C170",
  "A&O SCI M105",
  "AERO ST A",
  "AF AMER 6",
  "AF AMER C191",
  "AF AMER M103A",
  "AF AMER M104B",
  "AF AMER M104E",
  "AF AMER M10A",
  "AF AMER M12A",
  "AF AMER M179A",
  "AF AMER M18",
  "AF AMER M7B",
  "AF AMER M9B",
  "AM IND M10",
  "AN N EA 12W",
  "AN N EA 14W",
  "AN N EA 15",
  "AN N EA 162",
  "AN N EA 175",
  "AN N EA M104A",
  "AN N EA M110B",
  "AN N EA M50B",
  "ANTHRO 1",
  "ANTHRO 100",
  "ANTHRO 111",
  "ANTHRO 113Q",
  "ANTHRO 119",
  "ANTHRO 126P",
  "ANTHRO 135",
  "ANTHRO 136B",
  "ANTHRO 140",
  "ANTHRO 141",
  "ANTHRO 149",
  "ANTHRO 152Q",
  "ANTHRO 154Q",
  "ANTHRO 155",
  "ANTHRO 163P",
  "ANTHRO 3",
  "ANTHRO 4",
  "ANTHRO M116R",
  "ANTHRO M128R",
  "ANTHRO M145P",
  "ANTHRO M148",
  "APPLING 40W",
  "ARABIC 103B",
  "ARABIC 181",
  "ARCH&UD 10A",
  "ARCH&UD 121",
  "ARCH&UD 132",
  "ARCH&UD 142",
  "ARCH&UD CM153",
  "ARMENIA 101B",
  "ARMENIA 102B",
  "ARMENIA 104B",
  "ARMENIA 105B",
  "ART 100",
  "ART 11A",
  "ART 11B",
  "ART 11D",
  "ART 11E",
  "ART 130",
  "ART 133",
  "ART 137",
  "ART 140",
  "ART 145",
  "ART 147",
  "ART 148",
  "ART 150",
  "ART 1A",
  "ART 1B",
  "ART 21B",
  "ART 31B",
  "ART HIS 121D",
  "ART HIS 133E",
  "ART HIS 144",
  "ART HIS 200",
  "ART HIS 25",
  "ART HIS 30",
  "ART HIS C115B",
  "ART HIS C126",
  "ART HIS C148G",
  "ART HIS C151",
  "ART HIS M114C",
  "ART HIS M119C",
  "ART HIS M127C",
  "ART M184",
  "ARTS ED 105",
  "ASIA AM 103",
  "ASIA AM 109",
  "ASIA AM 122B",
  "ASIA AM 125",
  "ASIA AM 132A",
  "ASIA AM 140SL",
  "ASIA AM 141A",
  "ASIA AM 170",
  "ASIA AM 175B",
  "ASIA AM 178",
  "ASIA AM 185",
  "ASIA AM 187B",
  "ASIA AM 19",
  "ASIA AM 191C",
  "ASIA AM 200B",
  "ASIA AM 30W",
  "ASIA AM 40",
  "ASIA AM 50",
  "ASIA AM C142B",
  "ASIA AM M112B",
  "ASIA AM M168",
  "ASIAN 100",
  "ASIAN 135",
  "ASIAN 162",
  "ASIAN 200",
  "ASIAN M60W",
  "ASL 2",
  "ASL 5",
  "ASL M115",
  "ASTR 115",
  "ASTR 5",
  "ASTR 6",
  "ASTR 81",
  "BIOENGR 120",
  "BIOENGR 177B",
  "BIOENGR 180",
  "BIOENGR C101",
  "BIOENGR C107",
  "BIOENGR C139A",
  "BIOENGR C155",
  "BIOENGR C175",
  "BIOENGR C185",
  "BIOENGR CM186",
  "BIOL CH M140",
  "BIOSTAT 100B",
  "BIOSTAT 200B",
  "BMD RES 194H",
  "BMD RES 5HA",
  "BMD RES 5HB",
  "C&EE 102",
  "C&EE 108",
  "C&EE 108L",
  "C&EE 121",
  "C&EE 130",
  "C&EE 135B",
  "C&EE 142",
  "C&EE 151",
  "C&EE 156B",
  "C&EE 157L",
  "C&EE 164",
  "C&EE 19",
  "C&EE 194",
  "C&EE C104",
  "C&EE M166",
  "C&S BIO M185",
  "C&S BIO M186",
  "CESC 151",
  "CESC 50SL",
  "CESC 98A",
  "CH ENGR 101B",
  "CH ENGR 102A",
  "CH ENGR 104A",
  "CH ENGR 104C",
  "CH ENGR 104CL",
  "CH ENGR 104D",
  "CH ENGR 107",
  "CH ENGR 108A",
  "CH ENGR 194",
  "CH ENGR 45",
  "CH ENGR C112",
  "CH ENGR C124",
  "CHEM 113A",
  "CHEM 147",
  "CHEM 14A",
  "CHEM 14B",
  "CHEM 14BL",
  "CHEM 14C",
  "CHEM 14CL",
  "CHEM 14D",
  "CHEM 153B",
  "CHEM 153C",
  "CHEM 166",
  "CHEM 17",
  "CHEM 192C",
  "CHEM 20A",
  "CHEM 20B",
  "CHEM 20BH",
  "CHEM 30B",
  "CHEM 30C",
  "CHEM 89",
  "CHEM C113B",
  "CHEM C123B",
  "CHEM C126A",
  "CHEM C143A",
  "CHICANO 109",
  "CHICANO 10A",
  "CHICANO 123",
  "CHICANO 142",
  "CHICANO 150",
  "CHICANO 153C",
  "CHICANO 161",
  "CHICANO 194",
  "CHICANO 89",
  "CHICANO C141",
  "CHICANO CM106",
  "CHICANO CM110",
  "CHICANO CM177",
  "CHICANO M105C",
  "CHICANO M119",
  "CHICANO M146",
  "CHICANO M156B",
  "CHICANO M170SL",
  "CHICANO M175",
  "CHIN 100B",
  "CHIN 101B",
  "CHIN 102B",
  "CHIN 110B",
  "CHIN 124",
  "CHIN 155",
  "CHIN 159",
  "CHIN 2A",
  "CHIN 5",
  "CHIN 50",
  "CHIN 5A",
  "CHIN M183",
  "CLASSIC 130",
  "CLASSIC 137",
  "CLASSIC 185",
  "CLASSIC 19",
  "CLASSIC 193",
  "CLASSIC 20",
  "CLASSIC 51A",
  "CLASSIC 88GE",
  "CLASSIC M153K",
  "CLUSTER 20B",
  "CLUSTER 21B",
  "CLUSTER 30B",
  "CLUSTER 48B",
  "CLUSTER 60B",
  "CLUSTER 70B",
  "CLUSTER 73B",
  "CLUSTER 80B",
  "CLUSTER M1B",
  "CLUSTER M71B",
  "CLUSTER M72B",
  "COM HLT 179",
  "COM HLT CM170",
  "COM LIT 100",
  "COM LIT 200B",
  "COM LIT 2DW",
  "COM LIT 4CW",
  "COM LIT M101",
  "COM SCI 111",
  "COM SCI 118",
  "COM SCI 130",
  "COM SCI 131",
  "COM SCI 133",
  "COM SCI 143",
  "COM SCI 152B",
  "COM SCI 161",
  "COM SCI 174A",
  "COM SCI 180",
  "COM SCI 181",
  "COM SCI 31",
  "COM SCI 32",
  "COM SCI 33",
  "COM SCI CM124",
  "COM SCI CM186",
  "COM SCI M146",
  "COM SCI M151B",
  "COMM 10",
  "COMM 100",
  "COMM 103B",
  "COMM 104",
  "COMM 105",
  "COMM 111",
  "COMM 119",
  "COMM 133",
  "COMM 145",
  "COMM 148",
  "COMM 150",
  "COMM 151",
  "COMM 154",
  "COMM 155",
  "COMM 160",
  "COMM 170",
  "COMM 185",
  "COMM 187",
  "COMM 188C",
  "COMM 189",
  "COMM 19",
  "COMM 191E",
  "COMM 89",
  "COMM M149",
  "COMPTNG 10A",
  "COMPTNG 16",
  "COMPTNG 20A",
  "COMPTNG 40A",
  "DANCE 10",
  "DANCE 11",
  "DANCE 116",
  "DANCE 117A",
  "DANCE 117C",
  "DANCE 13",
  "DANCE 16",
  "DANCE 44",
  "DANCE 5",
  "DANCE 67A",
  "DANCE 67B",
  "DANCE 70",
  "DANCE C122",
  "DANCE C145",
  "DANCE C180",
  "DESMA 152",
  "DESMA 153",
  "DESMA 154",
  "DESMA 156",
  "DESMA 160",
  "DESMA 161",
  "DESMA 163",
  "DESMA 171",
  "DESMA 172",
  "DESMA 173",
  "DESMA 22",
  "DESMA 24",
  "DESMA 25",
  "DESMA 28",
  "DESMA 8",
  "DGT HUM M145",
  "DIS STD 101W",
  "DIS STD M115",
  "DUTCH 103B",
  "EC ENGR 10",
  "EC ENGR 100",
  "EC ENGR 101A",
  "EC ENGR 101B",
  "EC ENGR 102",
  "EC ENGR 110H",
  "EC ENGR 110L",
  "EC ENGR 111L",
  "EC ENGR 113DB",
  "EC ENGR 115B",
  "EC ENGR 121B",
  "EC ENGR 128",
  "EC ENGR 132A",
  "EC ENGR 133A",
  "EC ENGR 141",
  "EC ENGR 163C",
  "EC ENGR 170A",
  "EC ENGR 170B",
  "EC ENGR 173DB",
  "EC ENGR 189",
  "EC ENGR 2H",
  "EC ENGR C147",
  "EC ENGR M16",
  "ECON 1",
  "ECON 101",
  "ECON 102",
  "ECON 103",
  "ECON 103L",
  "ECON 106I",
  "ECON 106IL",
  "ECON 106M",
  "ECON 106ML",
  "ECON 106V",
  "ECON 106VL",
  "ECON 107",
  "ECON 11",
  "ECON 112",
  "ECON 113",
  "ECON 122",
  "ECON 134",
  "ECON 137",
  "ECON 144",
  "ECON 147",
  "ECON 147L",
  "ECON 160",
  "ECON 165",
  "ECON 170",
  "ECON 187",
  "ECON 2",
  "ECON 41",
  "ECON M123",
  "EDUC 11",
  "EDUC 132",
  "EDUC 143",
  "EDUC 164",
  "EDUC 166",
  "EDUC 184",
  "EDUC 188A",
  "EDUC 19",
  "EDUC 191C",
  "EDUC 196C",
  "EDUC 196D",
  "EDUC 35",
  "EDUC M103",
  "EE BIOL 100",
  "EE BIOL 101",
  "EE BIOL 120",
  "EE BIOL 129",
  "EE BIOL 130",
  "EE BIOL 170",
  "EE BIOL 183",
  "EE BIOL 185",
  "EE BIOL 19",
  "EE BIOL 200B",
  "EE BIOL C119B",
  "EE BIOL C126",
  "EE BIOL C172",
  "EE BIOL C177",
  "EE BIOL CM173",
  "EE BIOL M139",
  "EE BIOL M157",
  "EE BIOL M178",
  "ENGCOMP 1",
  "ENGCOMP 130D",
  "ENGCOMP 132",
  "ENGCOMP 133",
  "ENGCOMP 134",
  "ENGCOMP 1B",
  "ENGCOMP 2I",
  "ENGCOMP 3E",
  "ENGL 106",
  "ENGL 109",
  "ENGL 10B",
  "ENGL 10C",
  "ENGL 11",
  "ENGL 110B",
  "ENGL 110T",
  "ENGL 118B",
  "ENGL 129",
  "ENGL 135",
  "ENGL 140A",
  "ENGL 141C",
  "ENGL 142R",
  "ENGL 145",
  "ENGL 146",
  "ENGL 150A",
  "ENGL 150B",
  "ENGL 150C",
  "ENGL 157",
  "ENGL 160A",
  "ENGL 163B",
  "ENGL 163C",
  "ENGL 164C",
  "ENGL 164D",
  "ENGL 166B",
  "ENGL 167A",
  "ENGL 170A",
  "ENGL 173C",
  "ENGL 174B",
  "ENGL 80",
  "ENGL 87",
  "ENGL 91A",
  "ENGL 91C",
  "ENGL 97H",
  "ENGL 98TA",
  "ENGL M102B",
  "ENGL M104B",
  "ENGL M104E",
  "ENGL M105C",
  "ENGL M118F",
  "ENGL M191A",
  "ENGL M191C",
  "ENGL M50",
  "ENGR 110",
  "ENGR 111",
  "ENGR 160",
  "ENGR 183EW",
  "ENGR 185EW",
  "ENGR 2",
  "ENGR 23",
  "ENGR 24",
  "ENGR 25",
  "ENGR 96E",
  "ENGR 96G",
  "ENV HLT 100",
  "ENV HLT C152D",
  "ENVIRON 150",
  "ENVIRON 180B",
  "ENVIRON 19",
  "ENVIRON 200B",
  "ENVIRON M109",
  "ENVIRON M127",
  "ENVIRON M153",
  "ENVIRON M167",
  "EPIDEM 100",
  "EPIDEM 200B",
  "EPS SCI 1",
  "EPS SCI 101",
  "EPS SCI 103A",
  "EPS SCI 112",
  "EPS SCI 116",
  "EPS SCI 13",
  "EPS SCI 136A",
  "EPS SCI 139",
  "EPS SCI 15",
  "EPS SCI 153",
  "EPS SCI 154",
  "EPS SCI 16",
  "EPS SCI 171",
  "EPS SCI 193B",
  "EPS SCI 200C",
  "EPS SCI 200E",
  "EPS SCI 9",
  "EPS SCI C109",
  "EPS SCI C143",
  "ETHNMUS 158",
  "ETHNMUS 161Z",
  "ETHNMUS 174",
  "ETHNMUS 188",
  "ETHNMUS 20C",
  "ETHNMUS C100",
  "ETHNMUS C178",
  "ETHNMUS C200",
  "ETHNMUS M12A",
  "ETHNMUS M50B",
  "FILIPNO 2",
  "FILIPNO 5",
  "FILM TV 106B",
  "FILM TV 109",
  "FILM TV 113",
  "FILM TV 122M",
  "FILM TV 135B",
  "FILM TV 183A",
  "FILM TV 194",
  "FILM TV 33",
  "FILM TV 4",
  "FILM TV 51",
  "FILM TV 6A",
  "FILM TV 98TA",
  "FILM TV M50",
  "FOOD ST 159",
  "FOOD ST M79",
  "FRNCH 100",
  "FRNCH 101",
  "FRNCH 104",
  "FRNCH 107",
  "FRNCH 108",
  "FRNCH 117",
  "FRNCH 119",
  "FRNCH 120",
  "FRNCH 14",
  "FRNCH 16",
  "GENDER 10",
  "GENDER 102",
  "GENDER 187",
  "GENDER 98T",
  "GENDER CM132A",
  "GENDER M110C",
  "GENDER M114",
  "GENDER M146",
  "GENDER M149",
  "GENDER M154P",
  "GENDER M174",
  "GENDER M186B",
  "GEOG 1",
  "GEOG 105",
  "GEOG 108",
  "GEOG 133",
  "GEOG 140",
  "GEOG 141",
  "GEOG 152",
  "GEOG 159C",
  "GEOG 161",
  "GEOG 168",
  "GEOG 170",
  "GEOG 177",
  "GEOG 182B",
  "GEOG 186",
  "GEOG 3",
  "GEOG 7",
  "GEOG M109",
  "GEOG M127",
  "GEOG M146",
  "GERMAN 104",
  "GERMAN 110",
  "GERMAN 116",
  "GERMAN 154",
  "GERMAN 174",
  "GERMAN 19",
  "GERMAN 3",
  "GERMAN 4",
  "GERMAN 5",
  "GJ STDS 101",
  "GJ STDS 122B",
  "GJ STDS 125B",
  "GJ STDS 127B",
  "GJ STDS 176C",
  "GJ STDS M12A",
  "GJ STDS M50B",
  "GLBL ST 103",
  "GLBL ST 19",
  "GREEK 100",
  "GREEK 2",
  "GREEK 200C",
  "GREEK 8B",
  "GRNTLGY M108",
  "HEBREW 102B",
  "HEBREW 110B",
  "HEBREW 1B",
  "HIN-URD 100B",
  "HIN-URD 2",
  "HIST 107A",
  "HIST 107B",
  "HIST 111C",
  "HIST 116A",
  "HIST 11A",
  "HIST 121E",
  "HIST 122B",
  "HIST 124C",
  "HIST 127B",
  "HIST 130",
  "HIST 139B",
  "HIST 13B",
  "HIST 141B",
  "HIST 146B",
  "HIST 148",
  "HIST 161",
  "HIST 162A",
  "HIST 170B",
  "HIST 173D",
  "HIST 176B",
  "HIST 179A",
  "HIST 179B",
  "HIST 187D",
  "HIST 187E",
  "HIST 187J",
  "HIST 19",
  "HIST 1B",
  "HIST 21",
  "HIST 3C",
  "HIST 3D",
  "HIST 5",
  "HIST 88",
  "HIST 8B",
  "HIST 97C",
  "HIST 97J",
  "HIST 98T",
  "HIST C187R",
  "HIST C200M",
  "HIST M104A",
  "HIST M10A",
  "HIST M110B",
  "HIST M122E",
  "HIST M178",
  "HIST M185F",
  "HIST M186B",
  "HLT POL 140",
  "HNGAR 101B",
  "HNRS 11W",
  "HNRS 129",
  "HNRS 146",
  "HNRS 165",
  "HNRS 37W",
  "HNRS 70A",
  "HNRS 80",
  "HNRS 87W",
  "I A STD 111A",
  "I A STD 33",
  "I A STD 50",
  "I A STD M5B",
  "I A STD M7B",
  "IL AMER 18B",
  "IL AMER M5B",
  "INDO 100B",
  "INDO 2",
  "INDO 5",
  "INF STD 10",
  "INF STD 139",
  "INF STD 180",
  "INF STD 20",
  "INTL DV 110",
  "INTL DV 130",
  "INTL DV 191",
  "IRANIAN 102B",
  "IRANIAN 103B",
  "IRANIAN 1B",
  "IRANIAN 55",
  "IRANIAN M105B",
  "IRANIAN M110B",
  "IRANIAN M178",
  "ISLM ST 151",
  "ISLM ST M111",
  "ISLM ST M20",
  "ITALIAN 122",
  "ITALIAN 125",
  "ITALIAN 140",
  "ITALIAN 3",
  "ITALIAN 4",
  "ITALIAN 42A",
  "ITALIAN 5",
  "ITALIAN 6",
  "JAPAN 100B",
  "JAPAN 101B",
  "JAPAN 103A",
  "JAPAN 105A",
  "JAPAN 124",
  "JAPAN 172",
  "JAPAN 80",
  "JAPAN C159",
  "JAPAN CM123",
  "JAPAN CM160",
  "JEWISH M144",
  "JEWISH M150A",
  "JEWISH M178",
  "KOREA 100B",
  "KOREA 101B",
  "KOREA 102B",
  "KOREA 104B",
  "KOREA 124",
  "KOREA 153",
  "KOREA 159",
  "KOREA 177",
  "KOREA 2A",
  "KOREA 50",
  "LATIN 1",
  "LATIN 100",
  "LATIN 107",
  "LGBTQS 182",
  "LGBTQS 183",
  "LGBTQS 19",
  "LGBTQS M114",
  "LIFESCI 107",
  "LIFESCI 15",
  "LIFESCI 23L",
  "LIFESCI 30A",
  "LIFESCI 30B",
  "LIFESCI 7C",
  "LING 1",
  "LING 102",
  "LING 103",
  "LING 104",
  "LING 120A",
  "LING 120B",
  "LING 120C",
  "LING 127",
  "LING 130",
  "LING 165A",
  "LING 165B",
  "LING 185A",
  "LING 20",
  "LING M141",
  "M E STD M111",
  "M E STD M144",
  "M E STD M50B",
  "M PHARM 19",
  "MAT SCI 104",
  "MAT SCI 111",
  "MAT SCI 120",
  "MAT SCI 122",
  "MAT SCI 140A",
  "MAT SCI 141L",
  "MAT SCI 143A",
  "MAT SCI 150",
  "MAT SCI 90L",
  "MAT SCI M105",
  "MATH 103B",
  "MATH 105B",
  "MATH 106",
  "MATH 110A",
  "MATH 110B",
  "MATH 115AH",
  "MATH 115B",
  "MATH 116",
  "MATH 118",
  "MATH 11N",
  "MATH 120A",
  "MATH 121",
  "MATH 131AH",
  "MATH 131B",
  "MATH 131BH",
  "MATH 132",
  "MATH 132H",
  "MATH 135",
  "MATH 142",
  "MATH 146",
  "MATH 151A",
  "MATH 151B",
  "MATH 155",
  "MATH 156",
  "MATH 164",
  "MATH 167",
  "MATH 168",
  "MATH 170A",
  "MATH 170B",
  "MATH 171",
  "MATH 174E",
  "MATH 177",
  "MATH 178A",
  "MATH 178B",
  "MATH 182",
  "MATH 184",
  "MATH 31A",
  "MATH 31AL",
  "MATH 32BH",
  "MATH 33A",
  "MATH 33AH",
  "MATH 33B",
  "MATH 3A",
  "MATH 3B",
  "MATH 3C",
  "MATH 61",
  "MATH 71SL",
  "MATH M114S",
  "MCD BIO 138",
  "MCD BIO 144",
  "MCD BIO 160",
  "MCD BIO 165A",
  "MCD BIO 168",
  "MCD BIO 30H",
  "MCD BIO 50",
  "MCD BIO 60",
  "MCD BIO 90",
  "MCD BIO CM156",
  "MCD BIO M175B",
  "MECH&AE 101",
  "MECH&AE 102",
  "MECH&AE 103",
  "MECH&AE 105A",
  "MECH&AE 105D",
  "MECH&AE 107",
  "MECH&AE 133A",
  "MECH&AE 150A",
  "MECH&AE 154A",
  "MECH&AE 156A",
  "MECH&AE 161B",
  "MECH&AE 166C",
  "MECH&AE 171A",
  "MECH&AE 182B",
  "MECH&AE 82",
  "MECH&AE 94",
  "MECH&AE C183C",
  "MECH&AE CM140",
  "MECH&AE M168",
  "MECH&AE M183B",
  "MECH&AE M20",
  "MGMT 108",
  "MGMT 120B",
  "MGMT 121",
  "MGMT 122",
  "MGMT 127B",
  "MGMT 142A",
  "MGMT 160",
  "MGMT 161",
  "MGMT 165",
  "MGMT 168",
  "MGMT 180",
  "MGMT 1B",
  "MIL SCI 110",
  "MIL SCI 12",
  "MIL SCI 132",
  "MIL SCI 142",
  "MIL SCI 22",
  "MIL SCI Z",
  "MIMG 10",
  "MIMG 101",
  "MIMG 102",
  "MIMG 109AL",
  "MIMG 158",
  "MIMG 191H",
  "MIMG C185A",
  "MIMG CM156",
  "MSC IND 101",
  "MSC IND 113",
  "MSC IND 124",
  "MSC IND M181",
  "MUSC 104B",
  "MUSC 110C",
  "MUSC 114B",
  "MUSC 114D",
  "MUSC 115A",
  "MUSC 119",
  "MUSC 15",
  "MUSC 160F",
  "MUSC 160G",
  "MUSC 160I",
  "MUSC 160L",
  "MUSC 185F",
  "MUSC 50",
  "MUSC 60A",
  "MUSC 60C",
  "MUSC 60D",
  "MUSC 60J",
  "MUSC 61A",
  "MUSC C171",
  "MUSC C175G",
  "MUSC C185A",
  "MUSC C185D",
  "MUSC C185E",
  "MUSC C185G",
  "MUSC M90T",
  "MUSCLG 125B",
  "MUSCLG 13",
  "MUSCLG 168",
  "MUSCLG 187B",
  "MUSCLG 19",
  "MUSCLG 200B",
  "MUSCLG 35",
  "MUSCLG 68",
  "NAV SCI 20A",
  "NAV SCI Z",
  "NEURBIO M169",
  "NEURBIO M171",
  "NEUROSC M101B",
  "NEUROSC M119N",
  "NEUROSC M176",
  "NURSING 115",
  "NURSING 162A",
  "NURSING 168",
  "NURSING 197",
  "NURSING 20",
  "NURSING 3",
  "OBGYN 19",
  "PBMED 200A",
  "PHILOS 100B",
  "PHILOS 131",
  "PHILOS 135",
  "PHILOS 136",
  "PHILOS 152A",
  "PHILOS 166",
  "PHILOS 168",
  "PHILOS 170",
  "PHILOS 173",
  "PHILOS 177B",
  "PHILOS 2",
  "PHILOS 21",
  "PHILOS 22W",
  "PHILOS 31",
  "PHILOS 7",
  "PHILOS 8",
  "PHILOS 98T",
  "PHILOS C111",
  "PHILOS C115",
  "PHILOS C119",
  "PHILOS C127B",
  "PHILOS C156",
  "PHILOS M118B",
  "PHILOS M187",
  "PHYSCI 111A",
  "PHYSCI 111L",
  "PHYSCI 121",
  "PHYSCI 13",
  "PHYSCI 167",
  "PHYSCI 175",
  "PHYSCI 177",
  "PHYSCI 187A",
  "PHYSCI 194A",
  "PHYSCI 200",
  "PHYSCI 5",
  "PHYSCI C126",
  "PHYSCI C127",
  "PHYSCI C130",
  "PHYSCI C152",
  "PHYSCI M145",
  "PHYSCI M176",
  "PHYSCI M180B",
  "PHYSICS 105A",
  "PHYSICS 110A",
  "PHYSICS 115C",
  "PHYSICS 117",
  "PHYSICS 132",
  "PHYSICS 140B",
  "PHYSICS 144",
  "PHYSICS 17",
  "PHYSICS 180A",
  "PHYSICS 180C",
  "PHYSICS 180D",
  "PHYSICS 180E",
  "PHYSICS 180F",
  "PHYSICS 18L",
  "PHYSICS 1A",
  "PHYSICS 1B",
  "PHYSICS 1BH",
  "PHYSICS 98XA",
  "POL SCI 113B",
  "POL SCI 114B",
  "POL SCI 116B",
  "POL SCI 121A",
  "POL SCI 123A",
  "POL SCI 124A",
  "POL SCI 126",
  "POL SCI 138B",
  "POL SCI 139",
  "POL SCI 140A",
  "POL SCI 141B",
  "POL SCI 145E",
  "POL SCI 147C",
  "POL SCI 151A",
  "POL SCI 151B",
  "POL SCI 159A",
  "POL SCI 163A",
  "POL SCI 164A",
  "POL SCI 20",
  "POL SCI 200B",
  "POL SCI 30",
  "POL SCI 50",
  "POLSH 101B",
  "PORTGSE 11A",
  "PORTGSE 11B",
  "PORTGSE 130B",
  "PORTGSE 26",
  "PORTGSE M35",
  "PSYCH 10",
  "PSYCH 101",
  "PSYCH 110",
  "PSYCH 112A",
  "PSYCH 115",
  "PSYCH 116",
  "PSYCH 119J",
  "PSYCH 120A",
  "PSYCH 121",
  "PSYCH 124F",
  "PSYCH 124G",
  "PSYCH 124J",
  "PSYCH 130",
  "PSYCH 131",
  "PSYCH 132A",
  "PSYCH 133A",
  "PSYCH 133B",
  "PSYCH 134J",
  "PSYCH 135",
  "PSYCH 136B",
  "PSYCH 137C",
  "PSYCH 15",
  "PSYCH 150",
  "PSYCH 151",
  "PSYCH 152",
  "PSYCH 164",
  "PSYCH 167",
  "PSYCH 186C",
  "PSYCH 19",
  "PSYCH 200C",
  "PSYCH 20B",
  "PSYCH 85",
  "PSYCH 98TA",
  "PSYCH 98TB",
  "PSYCH M117B",
  "PSYCH M119N",
  "PSYCTRY 174",
  "PUB AFF 10",
  "PUB AFF 111",
  "PUB AFF 113",
  "PUB AFF 114",
  "PUB AFF 115",
  "PUB AFF 145",
  "PUB AFF 170",
  "PUB AFF 174",
  "PUB AFF 20",
  "PUB AFF 40",
  "PUB AFF M130",
  "PUB AFF M142",
  "PUB AFF M161",
  "PUB AFF M176SL",
  "PUB HLT 150",
  "PUB HLT 200B",
  "PUB HLT M106",
  "PUB PLC 10D",
  "RELIGN 160",
  "RELIGN 191",
  "RELIGN M105B",
  "RELIGN M118B",
  "RELIGN M20",
  "RELIGN M40",
  "RELIGN M50",
  "RELIGN M60W",
  "ROMANIA 101B",
  "ROMANIA 152",
  "RUSSN 100B",
  "RUSSN 101B",
  "RUSSN 102B",
  "RUSSN 107B",
  "RUSSN 126",
  "RUSSN 130A",
  "RUSSN 25W",
  "RUSSN 31",
  "RUSSN 5",
  "RUSSN C124D",
  "SCAND 12",
  "SCAND 138",
  "SCAND 155",
  "SCAND 156",
  "SCAND 165B",
  "SCAND 2",
  "SCAND 50W",
  "SCAND C171",
  "SCI EDU 100SL",
  "SEASIAN 135",
  "SEASIAN 50",
  "SLAVC 191TB",
  "SLAVC M40",
  "SOC GEN 105B",
  "SOC GEN 108",
  "SOC GEN 180",
  "SOC GEN 188",
  "SOC GEN 191S",
  "SOC GEN 5",
  "SOC GEN M132",
  "SOC GEN M140",
  "SOC GEN M157",
  "SOC WLF M108",
  "SOCIOL 1",
  "SOCIOL 111",
  "SOCIOL 113",
  "SOCIOL 128",
  "SOCIOL 133",
  "SOCIOL 147A",
  "SOCIOL 151",
  "SOCIOL 156",
  "SOCIOL 158",
  "SOCIOL 173",
  "SOCIOL 180A",
  "SOCIOL 189",
  "SOCIOL 19",
  "SOCIOL 191V",
  "SOCIOL 20",
  "SOCIOL M174",
  "SPAN 100B",
  "SPAN 11A",
  "SPAN 120",
  "SPAN 12B",
  "SPAN 135",
  "SPAN 140",
  "SPAN 191B",
  "SPAN 3",
  "SPAN 4",
  "SPAN 42",
  "SPAN 5",
  "SPAN 7B",
  "SPAN 98T",
  "SPAN M155A",
  "SPAN M172SL",
  "SPAN M35",
  "SRB CRO 101B",
  "SRB CRO 187C",
  "STATS 10",
  "STATS 100A",
  "STATS 100C",
  "STATS 115",
  "STATS 12",
  "STATS 13",
  "STATS 141SL",
  "STATS 143",
  "STATS 20",
  "STATS 200B",
  "STATS C155",
  "STATS C173",
  "SWAHILI 2",
  "THAI 2",
  "THEATER 103F",
  "THEATER 113",
  "THEATER 116B",
  "THEATER 118D",
  "THEATER 120B",
  "THEATER 124A",
  "THEATER 124B",
  "THEATER 124D",
  "THEATER 125A",
  "THEATER 125B",
  "THEATER 126A",
  "THEATER 126B",
  "THEATER 13",
  "THEATER 130",
  "THEATER 138",
  "THEATER 14B",
  "THEATER 15",
  "THEATER 167B",
  "THEATER 180",
  "THEATER 2B",
  "THEATER C146A",
  "THEATER C153F",
  "THEATER C155F",
  "THEATER M103A",
  "TURKIC 101B",
  "URBN PL 185SL",
  "URBN PL CM151",
  "URBN PL M167",
  "VIETMSE 100B",
  "VIETMSE 2A",
  "VIETMSE 5",
  "WL ARTS 120",
  "WL ARTS 19",
  "WL ARTS 20",
  "WL ARTS 24",
  "WL ARTS 80",
  "WL ARTS C139",
  "WL ARTS C145",
  "WL ARTS C151",
  "WL ARTS C158",
  "WL ARTS M128",
  "WL ARTS M23",
  "WL ARTS M79",
  "YIDDS 101B",
  "ANTHRO C117",
  "ARABIC 102B",
  "ART HIS 185",
  "ASTR 127",
  "ASTR 3",
  "C&EE 128L",
  "C&EE 147",
  "C&EE 154",
  "CHEM 110A",
  "CHIN 2",
  "COMM 188D",
  "COMPTNG 10B",
  "COMPTNG 10C",
  "DGT HUM 140",
  "EC ENGR 180DB",
  "ENGCOMP 100W",
  "ENGCOMP 131B",
  "ENGL 177",
  "ENGL M138",
  "ENGR 163",
  "ENVIRON 10",
  "FRNCH 3",
  "FRNCH 4",
  "FRNCH 5",
  "FRNCH 6",
  "GENDER M185A",
  "GEOG 5",
  "GERMAN 1",
  "HIST 119A",
  "HIST 187C",
  "HIST 1A",
  "LATIN 2",
  "LIFESCI 7A",
  "LIFESCI 7B",
  "MATH 131A",
  "MATH 32A",
  "MATH 32B",
  "MCD BIO 191",
  "MGMT 1A",
  "MIMG 103BL",
  "MUSCLG 191G",
  "PHYSICS 115B",
  "PHYSICS 131",
  "PHYSICS 1C",
  "PHYSICS 5C",
  "POL SCI 191C",
  "PSYCH 100A",
  "PSYCH 100B",
  "PSYCH 127A",
  "PUB AFF M191P",
  "SPAN 2",
  "SPAN 25",
  "STATS 101A",
  "C&EE 170",
  "CHEM 153A",
  "CHEM 20L",
  "CHEM 30AL",
  "CHEM 30BL",
  "COMM 1",
  "EC ENGR 115C",
  "EC ENGR 11L",
  "EE BIOL 100L",
  "EE BIOL 103",
  "EE BIOL 110",
  "ENGCOMP 3",
  "GENDER 104",
  "GEOG 6",
  "GEOG M153",
  "HIST 113B",
  "ITALIAN 1",
  "JAPAN 2",
  "JAPAN 5",
  "KOREA 2",
  "KOREA 5",
  "LIFESCI 110",
  "LIFESCI 40",
  "MAT SCI 131",
  "MAT SCI 131L",
  "MATH 110BH",
  "MATH 115A",
  "MATH 134",
  "MATH 170S",
  "MATH 31B",
  "MGMT 120A",
  "MGMT 127A",
  "PHYSICS 4AL",
  "PHYSICS 4BL",
  "PHYSICS 5A",
  "PHYSICS 5B",
  "PSYCH 118",
  "PSYCH 20A",
  "SOCIOL 101",
  "SOCIOL 102",
  "SPAN 1",
  "SPAN 119",
  "STATS 100B",
  "STATS 102A",
  "THEATER 106",
  "THEATER 1B",
  "THEATER 20",
  "THEATER 30",
  "VIETMSE 2",
  "COM SCI 35L",
  "ENGCOMP 2",
  "ENGL 4W",
  "FRNCH 1",
  "FRNCH 2",
  "GERMAN 2",
  "ITALIAN 2",
  "MATH 170E"
];

/* max # of seats for each class */
const TOTAL_SEATS = [
  270,
  112,
  25,
  27,
  100,
  270,
  90,
  90,
  15,
  15,
  15,
  100,
  120,
  240,
  15,
  5,
  15,
  15,
  30,
  15,
  4,
  10,
  10,
  10,
  150,
  20,
  240,
  280,
  100,
  25,
  25,
  20,
  60,
  306,
  60,
  60,
  75,
  60,
  60,
  60,
  120,
  120,
  60,
  60,
  60,
  60,
  60,
  60,
  306,
  255,
  42,
  20,
  60,
  20,
  22,
  15,
  35,
  200,
  28,
  20,
  20,
  9,
  25,
  25,
  16,
  16,
  50,
  17,
  16,
  17,
  17,
  15,
  30,
  15,
  12,
  15,
  15,
  15,
  13,
  17,
  17,
  20,
  80,
  60,
  60,
  60,
  10,
  315,
  315,
  60,
  60,
  40,
  60,
  30,
  20,
  15,
  5,
  20,
  20,
  12,
  60,
  20,
  60,
  15,
  20,
  70,
  20,
  60,
  20,
  60,
  20,
  15,
  10,
  240,
  150,
  150,
  15,
  10,
  10,
  50,
  40,
  50,
  5,
  68,
  40,
  20,
  30,
  43,
  175,
  82,
  50,
  84,
  73,
  75,
  48,
  15,
  20,
  20,
  15,
  20,
  8,
  10,
  100,
  29,
  20,
  90,
  45,
  80,
  85,
  16,
  35,
  40,
  60,
  50,
  50,
  16,
  18,
  35,
  20,
  10,
  25,
  50,
  55,
  15,
  32,
  120,
  40,
  90,
  90,
  50,
  12,
  6,
  12,
  90,
  90,
  10,
  90,
  40,
  25,
  60,
  50,
  700,
  1170,
  480,
  470,
  400,
  700,
  100,
  100,
  25,
  235,
  0,
  235,
  935,
  60,
  470,
  235,
  50,
  50,
  20,
  12,
  20,
  45,
  530,
  40,
  45,
  150,
  45,
  25,
  10,
  20,
  30,
  100,
  35,
  50,
  10,
  50,
  15,
  5,
  5,
  60,
  44,
  22,
  22,
  50,
  40,
  80,
  40,
  50,
  44,
  200,
  22,
  18,
  50,
  60,
  85,
  15,
  10,
  250,
  250,
  20,
  35,
  240,
  200,
  200,
  160,
  238,
  240,
  140,
  160,
  160,
  240,
  150,
  40,
  7,
  15,
  15,
  120,
  20,
  12,
  160,
  135,
  80,
  320,
  80,
  80,
  30,
  120,
  80,
  122,
  129,
  400,
  534,
  120,
  40,
  28,
  160,
  240,
  225,
  225,
  30,
  30,
  100,
  125,
  75,
  100,
  100,
  100,
  72,
  60,
  100,
  45,
  90,
  100,
  85,
  100,
  60,
  20,
  20,
  25,
  20,
  5,
  390,
  80,
  60,
  30,
  20,
  20,
  20,
  20,
  20,
  20,
  15,
  60,
  20,
  20,
  20,
  15,
  15,
  15,
  8,
  14,
  20,
  20,
  18,
  20,
  20,
  20,
  18,
  14,
  20,
  14,
  20,
  20,
  18,
  228,
  10,
  75,
  19,
  25,
  100,
  100,
  75,
  50,
  50,
  25,
  40,
  72,
  30,
  50,
  115,
  30,
  40,
  50,
  85,
  25,
  85,
  25,
  12,
  30,
  50,
  50,
  100,
  360,
  406,
  288,
  342,
  342,
  146,
  146,
  50,
  50,
  144,
  144,
  90,
  290,
  140,
  93,
  115,
  93,
  210,
  115,
  107,
  107,
  140,
  140,
  115,
  90,
  255,
  283,
  70,
  80,
  40,
  80,
  40,
  40,
  25,
  20,
  20,
  30,
  12,
  25,
  80,
  30,
  320,
  40,
  120,
  80,
  45,
  30,
  20,
  288,
  16,
  20,
  30,
  15,
  20,
  30,
  45,
  20,
  60,
  8,
  15,
  20,
  20,
  20,
  20,
  18,
  15,
  20,
  30,
  30,
  120,
  120,
  80,
  20,
  20,
  20,
  30,
  30,
  30,
  30,
  20,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  30,
  80,
  10,
  80,
  80,
  15,
  16,
  20,
  15,
  15,
  20,
  10,
  6,
  6,
  80,
  180,
  200,
  50,
  160,
  160,
  80,
  40,
  40,
  40,
  20,
  20,
  15,
  8,
  70,
  100,
  20,
  15,
  18,
  20,
  18,
  55,
  240,
  40,
  84,
  70,
  30,
  40,
  108,
  144,
  20,
  35,
  442,
  20,
  10,
  132,
  20,
  10,
  15,
  15,
  442,
  20,
  15,
  20,
  10,
  50,
  35,
  15,
  5,
  5,
  10,
  45,
  200,
  75,
  22,
  120,
  40,
  160,
  40,
  9,
  40,
  23,
  240,
  228,
  120,
  240,
  16,
  80,
  30,
  10,
  20,
  20,
  20,
  20,
  20,
  25,
  30,
  30,
  40,
  40,
  160,
  80,
  16,
  12,
  10,
  15,
  35,
  10,
  20,
  10,
  30,
  40,
  180,
  25,
  130,
  100,
  100,
  120,
  100,
  50,
  25,
  60,
  75,
  15,
  100,
  100,
  150,
  150,
  100,
  100,
  30,
  25,
  25,
  25,
  25,
  25,
  20,
  15,
  25,
  25,
  20,
  15,
  15,
  17,
  20,
  9,
  50,
  150,
  20,
  15,
  20,
  15,
  20,
  10,
  25,
  20,
  25,
  22,
  100,
  40,
  40,
  60,
  100,
  60,
  120,
  100,
  40,
  60,
  100,
  100,
  180,
  60,
  120,
  40,
  60,
  130,
  40,
  95,
  120,
  60,
  60,
  20,
  20,
  20,
  20,
  240,
  60,
  60,
  180,
  300,
  20,
  120,
  20,
  20,
  16,
  20,
  10,
  25,
  30,
  82,
  25,
  50,
  40,
  80,
  35,
  10,
  15,
  20,
  18,
  32,
  12,
  45,
  15,
  17,
  25,
  75,
  50,
  6,
  10,
  10,
  5,
  22,
  22,
  22,
  48,
  6,
  40,
  80,
  150,
  150,
  25,
  16,
  16,
  25,
  100,
  36,
  20,
  30,
  20,
  10,
  120,
  15,
  25,
  25,
  50,
  25,
  120,
  15,
  25,
  44,
  22,
  22,
  22,
  30,
  40,
  200,
  40,
  50,
  40,
  20,
  20,
  20,
  44,
  22,
  22,
  22,
  50,
  40,
  40,
  20,
  50,
  100,
  20,
  20,
  20,
  20,
  20,
  20,
  105,
  288,
  360,
  720,
  720,
  840,
  648,
  868,
  80,
  40,
  28,
  40,
  80,
  40,
  40,
  40,
  40,
  40,
  40,
  160,
  18,
  10,
  20,
  30,
  20,
  144,
  14,
  60,
  45,
  40,
  20,
  40,
  60,
  15,
  35,
  20,
  25,
  120,
  40,
  40,
  40,
  40,
  40,
  40,
  35,
  40,
  40,
  40,
  80,
  40,
  80,
  40,
  80,
  80,
  40,
  120,
  120,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  40,
  420,
  140,
  35,
  630,
  35,
  420,
  140,
  140,
  140,
  420,
  20,
  40,
  120,
  97,
  20,
  153,
  80,
  28,
  120,
  120,
  40,
  90,
  16,
  110,
  80,
  100,
  130,
  80,
  60,
  80,
  60,
  48,
  70,
  91,
  35,
  70,
  30,
  120,
  60,
  30,
  30,
  35,
  35,
  120,
  240,
  140,
  80,
  140,
  80,
  30,
  50,
  40,
  80,
  30,
  130,
  240,
  20,
  30,
  30,
  30,
  30,
  80,
  50,
  225,
  250,
  32,
  46,
  12,
  132,
  60,
  15,
  20,
  20,
  15,
  20,
  20,
  15,
  20,
  20,
  20,
  200,
  8,
  10,
  10,
  14,
  90,
  20,
  21,
  10,
  12,
  10,
  24,
  15,
  25,
  120,
  100,
  110,
  80,
  15,
  50,
  100,
  10,
  25,
  15,
  15,
  50,
  400,
  15,
  70,
  40,
  12,
  200,
  20,
  15,
  58,
  51,
  49,
  45,
  52,
  50,
  20,
  10,
  200,
  35,
  35,
  35,
  50,
  35,
  35,
  50,
  50,
  35,
  200,
  150,
  100,
  160,
  200,
  200,
  16,
  35,
  80,
  35,
  50,
  80,
  18,
  20,
  240,
  72,
  108,
  60,
  250,
  50,
  40,
  20,
  20,
  20,
  420,
  40,
  30,
  30,
  80,
  14,
  5,
  16,
  95,
  110,
  75,
  16,
  40,
  25,
  20,
  80,
  18,
  14,
  12,
  12,
  12,
  32,
  752,
  366,
  55,
  15,
  180,
  120,
  120,
  120,
  120,
  120,
  120,
  120,
  240,
  120,
  120,
  60,
  120,
  120,
  120,
  70,
  60,
  120,
  360,
  25,
  292,
  300,
  25,
  10,
  10,
  30,
  20,
  10,
  400,
  50,
  200,
  45,
  300,
  138,
  50,
  252,
  24,
  45,
  50,
  40,
  252,
  24,
  150,
  200,
  200,
  125,
  300,
  24,
  300,
  175,
  200,
  24,
  200,
  75,
  150,
  20,
  20,
  10,
  32,
  80,
  20,
  20,
  10,
  30,
  16,
  125,
  75,
  100,
  600,
  100,
  60,
  30,
  30,
  125,
  125,
  30,
  45,
  10,
  7,
  190,
  134,
  20,
  35,
  40,
  20,
  20,
  17,
  120,
  52,
  60,
  20,
  20,
  25,
  16,
  16,
  14,
  13,
  20,
  20,
  40,
  50,
  20,
  25,
  20,
  150,
  40,
  20,
  40,
  20,
  88,
  40,
  25,
  40,
  40,
  15,
  56,
  198,
  70,
  30,
  20,
  25,
  132,
  10,
  20,
  60,
  10,
  300,
  150,
  150,
  150,
  150,
  150,
  150,
  150,
  150,
  150,
  150,
  20,
  20,
  20,
  300,
  120,
  30,
  15,
  80,
  10,
  30,
  30,
  15,
  225,
  75,
  160,
  75,
  25,
  15,
  60,
  15,
  25,
  20,
  10,
  688,
  160,
  80,
  40,
  80,
  172,
  120,
  40,
  80,
  35,
  25,
  40,
  20,
  22,
  25,
  24,
  18,
  20,
  100,
  18,
  20,
  40,
  20,
  20,
  18,
  18,
  78,
  16,
  20,
  70,
  36,
  21,
  10,
  60,
  90,
  10,
  10,
  45,
  15,
  20,
  40,
  10,
  22,
  75,
  22,
  20,
  20,
  25,
  20,
  10,
  25,
  18,
  25,
  10,
  5,
  49,
  75,
  15,
  10,
  27,
  15,
  45,
  342,
  24,
  25,
  110,
  120,
  200,
  40,
  180,
  60,
  25,
  56,
  20,
  79,
  30,
  15,
  50,
  240,
  75,
  50,
  50,
  50,
  15,
  250,
  50,
  40,
  20,
  120,
  80,
  1080,
  1152,
  160,
  630,
  840,
  16,
  480,
  40,
  25,
  76,
  95,
  310,
  356,
  20,
  400,
  399,
  200,
  13,
  200,
  45,
  320,
  50,
  470,
  480,
  100,
  80,
  240,
  40,
  120,
  144,
  60,
  34,
  237,
  30,
  100,
  40,
  80,
  100,
  200,
  88,
  200,
  66,
  300,
  120,
  49,
  30,
  40,
  200,
  80,
  120,
  840,
  166,
  160,
  175,
  199,
  376,
  732,
  125,
  32,
  300,
  300,
  100,
  89,
  240,
  320,
  200,
  70,
  100,
  16,
  50,
  270,
  160,
  160,
  75,
  125,
  75,
  100,
  200
];

/* index of the time of second pass */
const SECOND_PASS_DATE = 3;

/* custom menu component to allow searching for classes */
const CustomMenu = React.forwardRef(
  ({ children, style, className, "aria-labelledby": labeledBy }, ref) => {
    const [value, setValue] = useState("");

    return (
      <div
        ref={ref}
        style={style}
        className={className}
        aria-labelledby={labeledBy}
      >
        <FormControl
          autoFocus
          className="mx-3 my-2 w-auto"
          placeholder="Type to filter..."
          onChange={e => setValue(e.target.value)}
          value={value}
        />
        <ul className="list-unstyled">
          {React.Children.toArray(children).filter(
            child =>
              !value || child.props.children.toLowerCase().startsWith(value)
          )}
        </ul>
      </div>
    );
  }
);

class Chart extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      useCanvas: false,
      classOnGraph: [],
      mouseY: 0,
      showClass: new Array(CLASSES.length).fill(false),
      dropdownClasses: [],
      removeDropdownClasses: [],
      numClassesShown: 0,
      isMobile: graphSize == screenScale * screen.width ? true : false,
      graphSize: graphSize
    };
  }

  updateDimensions() {
    this.setState({
      graphSize:
        screenScale * screen.width > 1000 ? 1000 : screenScale * screen.width
    });
    this.setState({
      isMobile:
        this.state.graphSize == screenScale * screen.width ? true : false
    });
  }

  componentDidMount() {
    this._createDropdownClasses();
    window.addEventListener("resize", this.updateDimensions.bind(this));
  }

  componentWillUnmount() {
    window.removeEventListener("resize", this.updateDimensions.bind(this));
  }

  _createDropdownClasses() {
    let dropdownClasses = this.state.dropdownClasses;
    for (let i = 0; i < CLASSES.length; i++) {
      let div = (
        <Dropdown.Item onClick={this._showClass.bind(null, i)}>
          {CLASSES[i]}
        </Dropdown.Item>
      );
      dropdownClasses.push(div);
    }
    this.setState({ dropdownClasses: dropdownClasses });
  }

  _onNearestX = (value, { index }) => {
    this.setState({ classOnGraph: DATA.map(d => d[index]) });
    this.setState({ mouseY: window.event.clientY });
  };

  _showClass = class_num => {
    let numClassesShown = this.state.numClassesShown;
    let showClass = this.state.showClass;
    let removeDropdownClasses = [];
    if (numClassesShown < max_classes) {
      if (showClass[class_num] == false) {
        showClass[class_num] = true;
        numClassesShown += 1;
        let xbutton = (
          <Image
            src="../../../../img/posts/class-fill-ups/xbutton.png"
            roundedCircle
          />
        );
        let colorNum = 0;
        for (let i = 0; i < CLASSES.length; i++) {
          if (showClass[i]) {
            let div = (
              <div
                style={{
                  minWidth: 120,
                  borderRadius: "10px",
                  border: "2px solid",
                  borderColor: colors[colorNum],
                  padding: 10,
                  marginBottom: 10,
                  display: "inline",
                  marginRight: 50
                }}
              >
                {CLASSES[i]}
                <a
                  style={{ paddingLeft: 10, cursor: "pointer" }}
                  onClick={this._removeClass.bind(null, i)}
                >
                  {xbutton}
                </a>
              </div>
            );
            removeDropdownClasses.push(div);
            colorNum++;
          }
        }

        this.setState({
          showClass: showClass,
          numClassesShown: numClassesShown,
          removeDropdownClasses: removeDropdownClasses
        });
      }
    }
  };

  _removeClass = class_num => {
    let numClassesShown = this.state.numClassesShown;
    let showClass = this.state.showClass;
    let removeDropdownClasses = [];

    showClass[class_num] = false;
    numClassesShown -= 1;

    let xbutton = (
      <Image
        src="../../../../img/posts/class-fill-ups/xbutton.png"
        roundedCircle
      />
    );
    let colorNum = 0;
    for (let i = 0; i < CLASSES.length; i++) {
      if (showClass[i]) {
        let div = (
          <div
            style={{
              minWidth: 120,
              borderRadius: "10px",
              border: "2px solid",
              borderColor: colors[colorNum],
              padding: 10,
              marginBottom: 10,
              display: "inline",
              marginRight: 50
            }}
          >
            {CLASSES[i]}
            <a
              style={{ paddingLeft: 10, cursor: "pointer" }}
              onClick={this._removeClass.bind(null, i)}
            >
              {xbutton}
            </a>
          </div>
        );
        removeDropdownClasses.push(div);
        colorNum++;
      }
    }
    this.setState({
      showClass: showClass,
      numClassesShown: numClassesShown,
      removeDropdownClasses: removeDropdownClasses
    });
  };

  render() {
    const { useCanvas } = this.state;
    const Line = useCanvas ? LineSeriesCanvas : LineSeries;
    const lineSize = "4px";
    const classOnGraph = this.state.classOnGraph;
    const mouseY = this.state.mouseY;
    const showClass = this.state.showClass;
    const dropdownClasses = this.state.dropdownClasses;
    const removeDropdownClasses = this.state.removeDropdownClasses;
    const isMobile = this.state.isMobile;
    const graphSize = this.state.graphSize;

    let classInfoBox = [];
    let lines = [];
    let classShown = false;
    let colorNum = 0;

    for (let i = 0; i < CLASSES.length; i++) {
      if (showClass[i]) {
        let div = (
          <Line
            strokeWidth={lineSize}
            data={DATA[i]}
            onNearestX={this._onNearestX}
            color={colors[colorNum]}
          />
        );
        lines.push(div);
        classShown = true;
        colorNum++;
      }
    }

    if (classOnGraph[0]) {
      let padding = 50;
      let div = (
        <div style={{ paddingLeft: padding }}>
          {isMobile ? (
            <h4 style={{ width: "max-content", color }}>
              {DATES[classOnGraph[0].x]}
            </h4>
          ) : (
            <h2 style={{ width: "max-content" }}>{DATES[classOnGraph[0].x]}</h2>
          )}
        </div>
      );
      classInfoBox.push(div);

      colorNum = 0;
      for (let i = 0; i < CLASSES.length; i++) {
        if (showClass[i]) {
          let div = (
            <div style={{ paddingLeft: padding }}>
              {isMobile ? (
                <h4 style={{ width: "max-content", color: colors[colorNum] }}>
                  {CLASSES[i]}
                </h4>
              ) : (
                <h2 style={{ width: "max-content", color: colors[colorNum] }}>
                  {CLASSES[i]}
                </h2>
              )}
              <p style={{ marginBottom: "0px" }}>
                Percent Full: {classOnGraph[i].y}%
              </p>
              <p style={{ marginBottom: "0px" }}>
                Seats Left: {SEATS_LEFT[i][classOnGraph[0].x].y}
              </p>
              <p>Total Seats: {TOTAL_SEATS[i]}</p>
            </div>
          );
          classInfoBox.push(div);
          colorNum++;
        }
      }
    }

    return (
      <div style={{ paddingTop: "20px", paddingBottom: "20px" }}>
        <div id="dropdown" style={{ paddingBottom: "15px" }}>
          <Dropdown>
            <Dropdown.Toggle>Choose a Class</Dropdown.Toggle>
            <Dropdown.Menu id="dropdown-basic-button" as={CustomMenu}>
              {dropdownClasses}
            </Dropdown.Menu>
          </Dropdown>
        </div>
        {removeDropdownClasses}
        <div
          style={{
            paddingTop: "30px",
            paddingLeft: "30px",
            display: "flex",
            justifyContent: "flex-start",
            width: graphSize,
            height: graphSize / 2
          }}
        >
          <FlexibleXYPlot>
            <HorizontalGridLines />
            <VerticalGridLines />
            <XAxis tickFormat={v => DATES[v]} />
            <YAxis />
            {isMobile ? null : (
              <ChartLabel
                text="Days Passed"
                className="alt-x-label"
                includeMargin={false}
                xPercent={0.018}
                yPercent={1.1}
                style={{
                  fontWeight: "bold"
                }}
              />
            )}
            {isMobile ? null : (
              <ChartLabel
                text="Percentage Full"
                className="alt-y-label"
                includeMargin={false}
                xPercent={0.1}
                yPercent={0.08}
                style={{
                  textAnchor: "end",
                  fontWeight: "bold"
                }}
              />
            )}
            {lines}
            <Line
              className="secondPass"
              color="gray"
              style={{
                strokeDasharray: "2 2"
              }}
              data={[
                { x: SECOND_PASS_DATE, y: 0 },
                { x: SECOND_PASS_DATE, y: 100 }
              ]}
            />
            <LabelSeries
              className="secondPassLabbel"
              labelAnchorX="middle"
              style={{ opacity: 0.6 }}
              data={[
                {
                  x: SECOND_PASS_DATE,
                  y: 50,
                  label: "Second Pass"
                }
              ]}
            />
            <Line
              className="classFull"
              color="#F08080"
              strokeWidth="6px"
              data={[
                { x: 0, y: 100 },
                { x: 6, y: 100 }
              ]}
            />

            {classShown ? (
              <Crosshair
                values={classOnGraph}
                itemsFormat={values => {
                  let shownLines = [];
                  for (let i = 0; i < CLASSES.length; i++) {
                    if (showClass[i]) {
                      let line = {
                        title: CLASSES[i],
                        value: classOnGraph[i].y + "%"
                      };
                      shownLines.push(line);
                    }
                  }
                  return shownLines;
                }}
                titleFormat={values => {
                  return { title: "Day", value: classOnGraph[0].x };
                }}
                style={{
                  line: {},
                  box: { position: "absolute", top: mouseY },
                  title: {}
                }}
              ></Crosshair>
            ) : null}
          </FlexibleXYPlot>
          {classShown ? (
            <div
              style={{
                display: "flex",
                flexDirection: "column",
                flexWrap: "nowrap"
              }}
            >
              {classInfoBox}
            </div>
          ) : null}
        </div>
      </div>
    );
  }
}

ReactDOM.render(<Chart />, document.getElementById("chartMD"));
